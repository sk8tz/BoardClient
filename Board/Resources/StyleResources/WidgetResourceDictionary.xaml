<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Custom="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:Custom1="http://metro.mahapps.com/winfx/xaml/shared"
                    xmlns:c1="http://schemas.componentone.com/winfx/2006/xaml">
    <!--  应该在此定义资源字典条目。  -->
    <Style x:Key="TabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Padding" Value="6,2" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="MinWidth" Value="5" />
        <Setter Property="MinHeight" Value="5" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Custom:ControlsHelper.HeaderFontSize" Value="{DynamicResource TabItemFontSize}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border x:Name="Border"
                            Width="100"
                            Height="32"
                            Margin="30,0,0,-7"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="3,3,0,0"
                            Padding="15,4,0,0"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <StackPanel HorizontalAlignment="Stretch" Orientation="Vertical">
                            <StackPanel.Resources>
                                <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
                            </StackPanel.Resources>
                            <ContentPresenter x:Name="ContentSite"
                                              Width="100"
                                              Height="31"
                                              Margin="0"
                                              HorizontalAlignment="Stretch"
                                              VerticalAlignment="Stretch"
                                              Content="{TemplateBinding Header}"
                                              ContentSource="Header"
                                              ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                                              OpacityMask="Black"
                                              RecognizesAccessKey="True"
                                              TextElement.FontSize="16"
                                              TextElement.FontStretch="{TemplateBinding Custom:ControlsHelper.HeaderFontStretch}"
                                              TextElement.FontWeight="{TemplateBinding Custom:ControlsHelper.HeaderFontWeight}"
                                              TextElement.Foreground="{TemplateBinding Foreground}" />
                            <Rectangle x:Name="Underline"
                                       Height="2"
                                       Margin="0,1,0,0"
                                       HorizontalAlignment="Stretch">
                                <Rectangle.Visibility>
                                    <Binding Path="(Custom:TabControlHelper.IsUnderlined)" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}">
                                        <Binding.Converter>
                                            <BooleanToVisibilityConverter />
                                        </Binding.Converter>
                                    </Binding>
                                </Rectangle.Visibility>
                            </Rectangle>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{DynamicResource AccentColorBrush}" />
                            <Setter TargetName="Underline" Property="Fill" Value="{DynamicResource AccentColorBrush}" />
                            <Setter TargetName="ContentSite" Property="OpacityMask" Value="#FFF6F6F6" />
                            <Setter TargetName="Border" Property="Background" Value="#FFF6F6F6" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{DynamicResource GrayNormalBrush}" />
                            <Setter TargetName="Underline" Property="Fill" Value="{DynamicResource GrayNormalBrush}" />
                        </Trigger>
                        <Trigger SourceName="ContentSite" Property="IsMouseOver" Value="True">
                            <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{DynamicResource GrayHoverBrush}" />
                            <Setter TargetName="Underline" Property="Fill" Value="{DynamicResource GrayHoverBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="ContentSite" Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{DynamicResource HighlightBrush}" />
                            <Setter TargetName="Underline" Property="Fill" Value="{DynamicResource HighlightBrush}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TabItemStyle2" TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Padding" Value="6,2" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="MinWidth" Value="5" />
        <Setter Property="MinHeight" Value="5" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Custom:ControlsHelper.HeaderFontSize" Value="{DynamicResource TabItemFontSize}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border x:Name="Border"
                            Width="100"
                            Height="32"
                            Margin="0,0,0,-7"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="3,3,0,0"
                            Padding="15,4,0,0"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <StackPanel HorizontalAlignment="Stretch" Orientation="Vertical">
                            <StackPanel.Resources>
                                <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
                            </StackPanel.Resources>
                            <ContentPresenter x:Name="ContentSite"
                                              Width="100"
                                              Height="31"
                                              Margin="0"
                                              HorizontalAlignment="Stretch"
                                              VerticalAlignment="Stretch"
                                              Content="{TemplateBinding Header}"
                                              ContentSource="Header"
                                              ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                                              OpacityMask="Black"
                                              RecognizesAccessKey="True"
                                              TextElement.FontSize="16"
                                              TextElement.FontStretch="{TemplateBinding Custom:ControlsHelper.HeaderFontStretch}"
                                              TextElement.FontWeight="{TemplateBinding Custom:ControlsHelper.HeaderFontWeight}"
                                              TextElement.Foreground="{TemplateBinding Foreground}" />
                            <Rectangle x:Name="Underline"
                                       Height="2"
                                       Margin="0,1,0,0"
                                       HorizontalAlignment="Stretch">
                                <Rectangle.Visibility>
                                    <Binding Path="(Custom:TabControlHelper.IsUnderlined)" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}">
                                        <Binding.Converter>
                                            <BooleanToVisibilityConverter />
                                        </Binding.Converter>
                                    </Binding>
                                </Rectangle.Visibility>
                            </Rectangle>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{DynamicResource AccentColorBrush}" />
                            <Setter TargetName="Underline" Property="Fill" Value="{DynamicResource AccentColorBrush}" />
                            <Setter TargetName="ContentSite" Property="OpacityMask" Value="#FFF6F6F6" />
                            <Setter TargetName="Border" Property="Background" Value="#FFF6F6F6" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{DynamicResource GrayNormalBrush}" />
                            <Setter TargetName="Underline" Property="Fill" Value="{DynamicResource GrayNormalBrush}" />
                        </Trigger>
                        <Trigger SourceName="ContentSite" Property="IsMouseOver" Value="True">
                            <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{DynamicResource GrayHoverBrush}" />
                            <Setter TargetName="Underline" Property="Fill" Value="{DynamicResource GrayHoverBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="ContentSite" Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{DynamicResource HighlightBrush}" />
                            <Setter TargetName="Underline" Property="Fill" Value="{DynamicResource HighlightBrush}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ConfigTabControlStyle" TargetType="{x:Type TabControl}">
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                            <RowDefinition x:Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="HeaderPanel"
                                  Grid.Row="0"
                                  Grid.Column="0"
                                  Height="32"
                                  Margin="0,0,0,-5"
                                  Panel.ZIndex="1"
                                  Background="#DCDCDC"
                                  IsItemsHost="True"
                                  KeyboardNavigation.TabIndex="1" />
                        <Border x:Name="ContentPanel"
                                Grid.Row="1"
                                Grid.Column="0"
                                Margin="0,10,0,0"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2"
                                KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              Margin="{TemplateBinding Padding}"
                                              Content="{TemplateBinding SelectedContent}"
                                              ContentSource="SelectedContent"
                                              ContentStringFormat="{TemplateBinding SelectedContentStringFormat}"
                                              ContentTemplate="{TemplateBinding SelectedContentTemplate}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="1" />
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="Auto" />
                            <Setter TargetName="HeaderPanel" Property="Margin" Value="2,0,2,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="0" />
                            <Setter TargetName="ContentPanel" Property="Grid.Column" Value="1" />
                            <Setter TargetName="ColumnDefinition0" Property="Width" Value="Auto" />
                            <Setter TargetName="ColumnDefinition1" Property="Width" Value="*" />
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                            <Setter TargetName="HeaderPanel" Property="Margin" Value="2,2,0,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="1" />
                            <Setter TargetName="ContentPanel" Property="Grid.Column" Value="0" />
                            <Setter TargetName="ColumnDefinition0" Property="Width" Value="*" />
                            <Setter TargetName="ColumnDefinition1" Property="Width" Value="Auto" />
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                            <Setter TargetName="HeaderPanel" Property="Margin" Value="0,2,2,2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WidgetButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="{DynamicResource UpperCaseContentFontSize}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFont}" />
        <Setter Property="Background" Value="#FFABD04C" />
        <Setter Property="Foreground" Value="#FFFBFDFF" />
        <Setter Property="Padding" Value="5,6" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border x:Name="Background"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3" />
                        <Rectangle x:Name="DisabledVisualElement"
                                   Fill="{DynamicResource ControlsDisabledBrush}"
                                   IsHitTestVisible="False"
                                   Opacity="0"
                                   RadiusX="3"
                                   RadiusY="3" />
                        <ContentPresenter x:Name="contentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Custom:ButtonHelper.PreserveTextCase" Value="False">
                            <Setter TargetName="contentPresenter" Property="Content" Value="{Binding Content, Converter={Custom1:ToUpperConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="Custom:ButtonHelper.PreserveTextCase" Value="True">
                            <Setter TargetName="contentPresenter" Property="Content" Value="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Background" Property="Background" Value="#72B607" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Background" Property="Background" Value="#619B06" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Background" Property="BorderThickness" Value="0" />
                            <Setter TargetName="Background" Property="BorderBrush" Value="#00000000" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="DisabledVisualElement" Property="Opacity" Value="0.7" />
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="#00000000" />
    </Style>

    <Style x:Key="WidgetTabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="Border.CornerRadius" Value="{DynamicResource TabItemTopCornerRadius}" />
        <Setter Property="Margin" Value="{DynamicResource TabItemMargin}" />
        <Setter Property="Foreground" Value="{DynamicResource TabItemForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border Uid="Border_18"
                            x:Name="Border"
                            Height="{TemplateBinding Height}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="3">
                        <ContentPresenter Uid="ContentPresenter_6"
                                          x:Name="ContentSite"
                                          Height="24"
                                          Margin="5,0"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding Header}"
                                          ContentSource="Header"
                                          ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                          ContentTemplate="{TemplateBinding HeaderTemplate}"
                                          OpacityMask="Black"
                                          RecognizesAccessKey="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.BasedOn>
            <Style TargetType="{x:Type TabItem}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Background" Value="#F6F6F6" />
                <Setter Property="BorderBrush" Value="{DynamicResource TabItemBorderBrush}" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="MinHeight" Value="20" />
                <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
                <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
                <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                <Setter Property="VerticalContentAlignment" Value="Stretch" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Padding" Value="6,1" />
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type Control}">
                            <Setter Property="Margin" Value="3,3,3,1" />
                            <Style.BasedOn>
                                <Style TargetType="{x:Type Control}">
                                    <Setter Property="Foreground" Value="{Binding AdornedElement.Foreground, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Adorner}}}" />
                                    <Style.BasedOn>
                                        <Style TargetType="{x:Type Control}">
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Rectangle Uid="Rectangle_71"
                                                                   x:Name="GenericFocusVisualRectangle"
                                                                   SnapsToDevicePixels="True"
                                                                   Stroke="{TemplateBinding Foreground}"
                                                                   StrokeDashArray="1 2"
                                                                   StrokeThickness="1" />
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Style.BasedOn>
                                </Style>
                            </Style.BasedOn>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Panel.ZIndex" Value="100" />
                        <Setter Property="Background" Value="#2885D2" />
                        <Setter Property="Foreground" Value="#FFFFFF" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="True" />
                            <Condition Property="IsSelected" Value="False" />
                        </MultiTrigger.Conditions>
                        <Setter Property="Background" Value="#2072B2" />
                        <Setter Property="Foreground" Value="#FFFFFF" />
                    </MultiTrigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Background" Value="Transparent" />
                        <Setter Property="BorderBrush" Value="Transparent" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.BasedOn>
        <Style.Triggers>
            <Trigger Property="TabStripPlacement" Value="Bottom">
                <Setter Property="Border.CornerRadius" Value="{DynamicResource TabItemBottomCornerRadius}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TabItemSelectedForegroundBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource TabItemMouseOverForegroundBrush}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource TabItemDisabledForegroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="OptionsTabControlStyle" TargetType="{x:Type TabControl}">
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                            <RowDefinition x:Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="HeaderPanel"
                                  Grid.Row="0"
                                  Grid.Column="0"
                                  Height="24"
                                  Margin="3,0,0,0"
                                  Panel.ZIndex="1"
                                  IsItemsHost="True"
                                  KeyboardNavigation.TabIndex="1" />
                        <Border x:Name="ContentPanel"
                                Grid.Row="1"
                                Grid.Column="0"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2"
                                KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              Margin="{TemplateBinding Padding}"
                                              Content="{TemplateBinding SelectedContent}"
                                              ContentSource="SelectedContent"
                                              ContentStringFormat="{TemplateBinding SelectedContentStringFormat}"
                                              ContentTemplate="{TemplateBinding SelectedContentTemplate}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="1" />
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="Auto" />
                            <Setter TargetName="HeaderPanel" Property="Margin" Value="2,0,2,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="0" />
                            <Setter TargetName="ContentPanel" Property="Grid.Column" Value="1" />
                            <Setter TargetName="ColumnDefinition0" Property="Width" Value="Auto" />
                            <Setter TargetName="ColumnDefinition1" Property="Width" Value="*" />
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                            <Setter TargetName="HeaderPanel" Property="Margin" Value="2,2,0,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="1" />
                            <Setter TargetName="ContentPanel" Property="Grid.Column" Value="0" />
                            <Setter TargetName="ColumnDefinition0" Property="Width" Value="*" />
                            <Setter TargetName="ColumnDefinition1" Property="Width" Value="Auto" />
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                            <Setter TargetName="HeaderPanel" Property="Margin" Value="0,2,2,2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DisplayTypeListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border Uid="Border_57"
                            x:Name="ListBoxItemRoot"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1,0"
                            CornerRadius="2">
                        <Path x:Name="Path"
                              Width="32"
                              Height="32"
                              Margin="10"
                              Data="{Binding Data}"
                              Fill="{TemplateBinding Foreground}"
                              Stretch="Uniform"
                              Stroke="#333333"
                              StrokeThickness="0"
                              ToolTip="{Binding Description}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.BasedOn>
            <Style TargetType="{x:Type ListBoxItem}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="FocusVisualStyle" Value="{DynamicResource ForegroundBrushFocusVisual}" />
                <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
                <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
                <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource ListItemForegroundBrush}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderThickness" Value="{DynamicResource ListBoxItemBorderThickness}" />
                <Setter Property="Padding" Value="4,2" />
                <Setter Property="MinHeight" Value="20" />
                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Border Uid="ListBoxItemRoot"
                                    x:Name="ListBoxItemRoot"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                <ContentPresenter Uid="ListBoxItemContent"
                                                  x:Name="ListBoxItemContent"
                                                  Margin="{TemplateBinding Padding}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Content="{TemplateBinding Content}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.BasedOn>
                    <Style TargetType="{x:Type ListBoxItem}">
                        <Setter Property="AutomationProperties.AutomationId" Value="{Binding FullName}" />
                        <Setter Property="AutomationProperties.Name" Value="{Binding DisplayName}" />
                        <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
                    </Style>
                </Style.BasedOn>
                <Style.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="True" />
                            <Condition Property="IsSelected" Value="False" />
                        </MultiTrigger.Conditions>
                        <Setter Property="Background" Value="{DynamicResource ListItemMouseOverBackgroundBrush}" />
                        <Setter Property="Foreground" Value="{DynamicResource ListItemMouseOverForegroundBrush}" />
                        <Setter Property="BorderBrush" Value="{DynamicResource ListItemMouseOverBorderBrush}" />
                    </MultiTrigger>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="#2885D2" />
                        <Setter Property="Foreground" Value="{DynamicResource ListItemSelectedForegroundBrush}" />
                        <Setter Property="BorderBrush" Value="{DynamicResource ListItemSelectedBorderBrush}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="LightGray" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="True">
                        <Setter Property="Foreground" Value="#333333" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.BasedOn>
    </Style>

    <ControlTemplate x:Key="C1NumericBoxControlTemplate" TargetType="{x:Type c1:C1NumericBox}">
        <Grid x:Name="Root">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0"
                                             Storyboard.TargetName="DisabledVisualElement"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames BeginTime="0"
                                                           Duration="0:0:0.001"
                                                           Storyboard.TargetName="MouseOverElement"
                                                           Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Visible</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="FocusStates">
                    <VisualState x:Name="Unfocused" />
                    <VisualState x:Name="Focused">
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames BeginTime="0"
                                                           Duration="0:0:0.001"
                                                           Storyboard.TargetName="FocusedVisualElement"
                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="ButtonsVisibilityStates">
                    <VisualState x:Name="HideButtons">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames BeginTime="0"
                                                           Duration="0:0:0.001"
                                                           Storyboard.TargetName="IncreaseBorder"
                                                           Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Collapsed</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="0"
                                                           Duration="0:0:0.001"
                                                           Storyboard.TargetName="DecreaseBorder"
                                                           Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Collapsed</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="ShowButtons">
                        <Storyboard />
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="ValidationStates">
                    <VisualState x:Name="Valid" />
                    <VisualState x:Name="InvalidUnfocused">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ValidationDecorator" Storyboard.TargetProperty="ValidationState">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <c1:ValidationState>InvalidUnfocused</c1:ValidationState>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="InvalidFocused">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ValidationDecorator" Storyboard.TargetProperty="ValidationState">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <c1:ValidationState>InvalidFocused</c1:ValidationState>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition x:Name="ButtonsColumn" Width="0" />
                </Grid.ColumnDefinitions>
                <Border x:Name="BackgroundElement"
                        Grid.ColumnSpan="3"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="3" />
                <c1:C1TextBoxBase x:Name="Text"
                                  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                  Background="Transparent"
                                  BorderThickness="0"
                                  DisabledCuesVisibility="Collapsed"
                                  FocusCuesVisibility="Collapsed"
                                  Foreground="{TemplateBinding Foreground}"
                                  IsEnabled="True"
                                  IsTabStop="{TemplateBinding IsTabStop}"
                                  Padding="{TemplateBinding Padding}"
                                  SelectionBackground="{TemplateBinding SelectionBackground}"
                                  SelectionForeground="{TemplateBinding SelectionForeground}"
                                  TabIndex="{TemplateBinding TabIndex}"
                                  TextAlignment="{TemplateBinding TextAlignment}"
                                  Watermark="{TemplateBinding Watermark}">
                    <c1:C1TextBoxBase.Margin>
                        <Binding ConverterParameter="left-top-bottom"
                                 Path="BorderThickness"
                                 RelativeSource="{RelativeSource TemplatedParent}">
                            <Binding.Converter>
                                <c1:C1SideThicknessConverter />
                            </Binding.Converter>
                        </Binding>
                    </c1:C1TextBoxBase.Margin>
                </c1:C1TextBoxBase>
                <Border x:Name="FocusedVisualElement"
                        Grid.ColumnSpan="3"
                        BorderBrush="{TemplateBinding FocusBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}"
                        Opacity="0"
                        Visibility="{TemplateBinding FocusCuesVisibility}" />
                <Border x:Name="MouseOverElement"
                        Grid.ColumnSpan="3"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}"
                        Visibility="Collapsed" />
                <Border x:Name="DisabledVisualElement"
                        Grid.ColumnSpan="3"
                        Background="#77E8E8E8"
                        CornerRadius="{TemplateBinding CornerRadius}"
                        IsHitTestVisible="False"
                        Opacity="0"
                        Visibility="{TemplateBinding DisabledCuesVisibility}" />
                <Grid Grid.Column="2">
                    <Grid.Margin>
                        <Binding ConverterParameter="top-right-bottom"
                                 Path="BorderThickness"
                                 RelativeSource="{RelativeSource TemplatedParent}">
                            <Binding.Converter>
                                <c1:C1SideThicknessConverter />
                            </Binding.Converter>
                        </Binding>
                    </Grid.Margin>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <Border x:Name="IncreaseBorder">
                        <RepeatButton x:Name="Increase"
                                      Width="15"
                                      Background="{TemplateBinding ButtonBackground}"
                                      BorderBrush="{TemplateBinding BorderBrush}"
                                      BorderThickness="1,0,0,0"
                                      Delay="{TemplateBinding Delay}"
                                      Interval="{TemplateBinding Interval}"
                                      IsTabStop="False"
                                      Padding="0"
                                      c1:ClearStyleExtensions.MouseOverBrush="{TemplateBinding MouseOverBrush}"
                                      c1:ClearStyleExtensions.PressedBrush="{TemplateBinding PressedBrush}">
                            <c1:ClearStyleExtensions.CornerRadius>
                                <Binding ConverterParameter="topright"
                                         Path="CornerRadius"
                                         RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <c1:C1SideRadiusConverter />
                                    </Binding.Converter>
                                </Binding>
                            </c1:ClearStyleExtensions.CornerRadius>
                            <RepeatButton.Style>
                                <Style TargetType="{x:Type ButtonBase}">
                                    <Setter Property="Padding" Value="3" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ButtonBase}">
                                                <Grid>
                                                    <VisualStateManager.VisualStateGroups>
                                                        <VisualStateGroup x:Name="CommonStates">
                                                            <VisualState x:Name="Normal" />
                                                            <VisualState x:Name="MouseOver">
                                                                <Storyboard>
                                                                    <ObjectAnimationUsingKeyFrames Duration="0"
                                                                                                   Storyboard.TargetName="MouseOverElement"
                                                                                                   Storyboard.TargetProperty="(UIElement.Visibility)">
                                                                        <DiscreteObjectKeyFrame KeyTime="0">
                                                                            <DiscreteObjectKeyFrame.Value>
                                                                                <Visibility>Visible</Visibility>
                                                                            </DiscreteObjectKeyFrame.Value>
                                                                        </DiscreteObjectKeyFrame>
                                                                    </ObjectAnimationUsingKeyFrames>
                                                                </Storyboard>
                                                            </VisualState>
                                                            <VisualState x:Name="Pressed">
                                                                <Storyboard>
                                                                    <ObjectAnimationUsingKeyFrames Duration="0"
                                                                                                   Storyboard.TargetName="PressedElement"
                                                                                                   Storyboard.TargetProperty="(UIElement.Visibility)">
                                                                        <DiscreteObjectKeyFrame KeyTime="0">
                                                                            <DiscreteObjectKeyFrame.Value>
                                                                                <Visibility>Visible</Visibility>
                                                                            </DiscreteObjectKeyFrame.Value>
                                                                        </DiscreteObjectKeyFrame>
                                                                    </ObjectAnimationUsingKeyFrames>
                                                                </Storyboard>
                                                            </VisualState>
                                                            <VisualState x:Name="Disabled">
                                                                <Storyboard>
                                                                    <DoubleAnimation Duration="0"
                                                                                     Storyboard.TargetName="BackgroundElement"
                                                                                     Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                                     To="0.5" />
                                                                    <DoubleAnimation Duration="0"
                                                                                     Storyboard.TargetName="contentPresenter"
                                                                                     Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                                     To="0.5" />
                                                                </Storyboard>
                                                            </VisualState>
                                                        </VisualStateGroup>
                                                        <VisualStateGroup x:Name="CheckStates">
                                                            <VisualState x:Name="Checked">
                                                                <Storyboard>
                                                                    <ObjectAnimationUsingKeyFrames Duration="0"
                                                                                                   Storyboard.TargetName="CheckedElement"
                                                                                                   Storyboard.TargetProperty="(UIElement.Visibility)">
                                                                        <DiscreteObjectKeyFrame KeyTime="0">
                                                                            <DiscreteObjectKeyFrame.Value>
                                                                                <Visibility>Visible</Visibility>
                                                                            </DiscreteObjectKeyFrame.Value>
                                                                        </DiscreteObjectKeyFrame>
                                                                    </ObjectAnimationUsingKeyFrames>
                                                                </Storyboard>
                                                            </VisualState>
                                                            <VisualState x:Name="Unchecked" />
                                                        </VisualStateGroup>
                                                        <VisualStateGroup x:Name="FocusStates">
                                                            <VisualState x:Name="Focused">
                                                                <Storyboard>
                                                                    <DoubleAnimation Duration="0"
                                                                                     Storyboard.TargetName="FocusVisualElement"
                                                                                     Storyboard.TargetProperty="Opacity"
                                                                                     To="1" />
                                                                </Storyboard>
                                                            </VisualState>
                                                            <VisualState x:Name="Unfocused" />
                                                        </VisualStateGroup>
                                                    </VisualStateManager.VisualStateGroups>
                                                    <c1:C1BrushBuilder x:Name="BackgroundBrush"
                                                                       DesignColor="#FFD1DCE8"
                                                                       ExtrapolationMethod="Absolute"
                                                                       Input="{Binding Background,
                                                                                       RelativeSource={RelativeSource TemplatedParent}}"
                                                                       IsHitTestVisible="False"
                                                                       Visibility="Collapsed">
                                                        <c1:C1BrushBuilder.DesignBrush>
                                                            <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                                <GradientStop Offset="0" Color="#FFF2F2F2" />
                                                                <GradientStop Offset="0.5" Color="#FFEBEBEB" />
                                                                <GradientStop Offset="0.5" Color="Gainsboro" />
                                                                <GradientStop Offset="1" Color="#FFD0D0D0" />
                                                            </LinearGradientBrush>
                                                        </c1:C1BrushBuilder.DesignBrush>
                                                    </c1:C1BrushBuilder>
                                                    <c1:C1BrushBuilder x:Name="MouseOverBrush"
                                                                       DesignColor="#FFBFE1EA"
                                                                       ExtrapolationMethod="Absolute"
                                                                       Input="{TemplateBinding c1:ClearStyleExtensions.MouseOverBrush}"
                                                                       IsHitTestVisible="False"
                                                                       Visibility="Collapsed">
                                                        <c1:C1BrushBuilder.DesignBrush>
                                                            <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                                <GradientStop Offset="0" Color="#FFE7F5FD" />
                                                                <GradientStop Offset="0.5" Color="#FFDCF0FC" />
                                                                <GradientStop Offset="0.5" Color="#FFBDE6FD" />
                                                                <GradientStop Offset="1" Color="#FFA9D9F5" />
                                                            </LinearGradientBrush>
                                                        </c1:C1BrushBuilder.DesignBrush>
                                                    </c1:C1BrushBuilder>
                                                    <c1:C1BrushBuilder x:Name="PressedBrush"
                                                                       DesignColor="#FF8ED1E2"
                                                                       ExtrapolationMethod="Absolute"
                                                                       Input="{TemplateBinding c1:ClearStyleExtensions.PressedBrush}"
                                                                       IsHitTestVisible="False"
                                                                       Visibility="Collapsed">
                                                        <c1:C1BrushBuilder.DesignBrush>
                                                            <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                                <GradientStop Offset="0" Color="#FFA9D9F5" />
                                                                <GradientStop Offset="0.5" Color="#FFC1E4F5" />
                                                                <GradientStop Offset="0.5" Color="#FFA9DAF3" />
                                                                <GradientStop Offset="1" Color="#FF91CDEB" />
                                                            </LinearGradientBrush>
                                                        </c1:C1BrushBuilder.DesignBrush>
                                                    </c1:C1BrushBuilder>
                                                    <c1:C1BrushBuilder x:Name="CheckedBrush"
                                                                       DesignBrush="#FF8ED1E2"
                                                                       DesignColor="#FF8ED1E2"
                                                                       ExtrapolationMethod="Absolute"
                                                                       Input="{TemplateBinding c1:ClearStyleExtensions.PressedBrush}"
                                                                       IsHitTestVisible="False"
                                                                       Visibility="Collapsed" />
                                                    <c1:C1BrushBuilder x:Name="InnerBorderBrush"
                                                                       DesignBrush="#FFFAFBFC"
                                                                       DesignColor="#FFD1DCE8"
                                                                       ExtrapolationMethod="Absolute"
                                                                       Input="{Binding Background,
                                                                                       RelativeSource={RelativeSource TemplatedParent}}"
                                                                       IsHitTestVisible="False"
                                                                       Visibility="Collapsed" />
                                                    <c1:C1BrushBuilder x:Name="InnerBorderMouseOverBrush"
                                                                       DesignBrush="#FFFAFBFC"
                                                                       DesignColor="#FFBFE1EA"
                                                                       ExtrapolationMethod="Absolute"
                                                                       Input="{TemplateBinding c1:ClearStyleExtensions.MouseOverBrush}"
                                                                       IsHitTestVisible="False"
                                                                       Visibility="Collapsed" />
                                                    <c1:C1BrushBuilder x:Name="InnerBorderPressedBrush"
                                                                       DesignBrush="#FFFAFBFC"
                                                                       DesignColor="#FF8ED1E2"
                                                                       ExtrapolationMethod="Absolute"
                                                                       Input="{TemplateBinding c1:ClearStyleExtensions.PressedBrush}"
                                                                       IsHitTestVisible="False"
                                                                       Visibility="Collapsed" />
                                                    <Border x:Name="BackgroundElement"
                                                            Background="{Binding Output,
                                                                                 ElementName=BackgroundBrush}"
                                                            BorderBrush="{TemplateBinding BorderBrush}"
                                                            BorderThickness="{TemplateBinding BorderThickness}"
                                                            CornerRadius="{TemplateBinding c1:ClearStyleExtensions.CornerRadius}">
                                                        <Border BorderBrush="{Binding Output,
                                                                                      ElementName=InnerBorderBrush}"
                                                                BorderThickness="1"
                                                                CornerRadius="{TemplateBinding c1:ClearStyleExtensions.CornerRadius}" />
                                                    </Border>
                                                    <Border x:Name="CheckedElement"
                                                            Background="{Binding Output,
                                                                                 ElementName=CheckedBrush}"
                                                            BorderThickness="{TemplateBinding BorderThickness}"
                                                            CornerRadius="{TemplateBinding c1:ClearStyleExtensions.CornerRadius}"
                                                            Visibility="Collapsed" />
                                                    <Border x:Name="MouseOverElement"
                                                            Background="{Binding Output,
                                                                                 ElementName=MouseOverBrush}"
                                                            BorderThickness="{TemplateBinding BorderThickness}"
                                                            CornerRadius="{TemplateBinding c1:ClearStyleExtensions.CornerRadius}"
                                                            Visibility="Collapsed">
                                                        <Border BorderBrush="{Binding Output,
                                                                                      ElementName=InnerBorderMouseOverBrush}"
                                                                BorderThickness="1"
                                                                CornerRadius="{TemplateBinding c1:ClearStyleExtensions.CornerRadius}" />
                                                    </Border>
                                                    <Border x:Name="PressedElement"
                                                            Background="{Binding Output,
                                                                                 ElementName=PressedBrush}"
                                                            BorderThickness="{TemplateBinding BorderThickness}"
                                                            CornerRadius="{TemplateBinding c1:ClearStyleExtensions.CornerRadius}"
                                                            Visibility="Collapsed">
                                                        <Border BorderBrush="{Binding Output,
                                                                                      ElementName=InnerBorderPressedBrush}"
                                                                BorderThickness="1"
                                                                CornerRadius="{TemplateBinding c1:ClearStyleExtensions.CornerRadius}" />
                                                    </Border>
                                                    <ContentPresenter x:Name="contentPresenter"
                                                                      Margin="{TemplateBinding Padding}"
                                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                                      Content="{TemplateBinding Content}"
                                                                      ContentTemplate="{TemplateBinding ContentTemplate}" />
                                                    <Border x:Name="FocusVisualElement"
                                                            BorderBrush="{TemplateBinding c1:ClearStyleExtensions.FocusBrush}"
                                                            BorderThickness="{TemplateBinding BorderThickness}"
                                                            CornerRadius="{TemplateBinding c1:ClearStyleExtensions.CornerRadius}"
                                                            IsHitTestVisible="False"
                                                            Opacity="0" />
                                                </Grid>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </RepeatButton.Style>
                            <Polygon Width="5"
                                     Height="5"
                                     Margin="0,0,1,1"
                                     Fill="{TemplateBinding ButtonForeground}"
                                     Points="1,0 2,1 0,1"
                                     Stretch="Uniform" />
                        </RepeatButton>
                    </Border>
                    <Border x:Name="DecreaseBorder"
                            Grid.Row="1"
                            Margin="0,-1,0,0">
                        <RepeatButton x:Name="Decrease"
                                      Width="15"
                                      Background="{TemplateBinding ButtonBackground}"
                                      BorderBrush="{TemplateBinding BorderBrush}"
                                      BorderThickness="1,0,0,0"
                                      Delay="{TemplateBinding Delay}"
                                      Interval="{TemplateBinding Interval}"
                                      IsTabStop="False"
                                      Padding="0"
                                      c1:ClearStyleExtensions.MouseOverBrush="{TemplateBinding MouseOverBrush}"
                                      c1:ClearStyleExtensions.PressedBrush="{TemplateBinding PressedBrush}">
                            <c1:ClearStyleExtensions.CornerRadius>
                                <Binding ConverterParameter="bottomright"
                                         Path="CornerRadius"
                                         RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <c1:C1SideRadiusConverter />
                                    </Binding.Converter>
                                </Binding>
                            </c1:ClearStyleExtensions.CornerRadius>
                            <RepeatButton.Style>
                                <Style TargetType="{x:Type ButtonBase}">
                                    <Setter Property="Padding" Value="3" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ButtonBase}">
                                                <Grid>
                                                    <VisualStateManager.VisualStateGroups>
                                                        <VisualStateGroup x:Name="CommonStates">
                                                            <VisualState x:Name="Normal" />
                                                            <VisualState x:Name="MouseOver">
                                                                <Storyboard>
                                                                    <ObjectAnimationUsingKeyFrames Duration="0"
                                                                                                   Storyboard.TargetName="MouseOverElement"
                                                                                                   Storyboard.TargetProperty="(UIElement.Visibility)">
                                                                        <DiscreteObjectKeyFrame KeyTime="0">
                                                                            <DiscreteObjectKeyFrame.Value>
                                                                                <Visibility>Visible</Visibility>
                                                                            </DiscreteObjectKeyFrame.Value>
                                                                        </DiscreteObjectKeyFrame>
                                                                    </ObjectAnimationUsingKeyFrames>
                                                                </Storyboard>
                                                            </VisualState>
                                                            <VisualState x:Name="Pressed">
                                                                <Storyboard>
                                                                    <ObjectAnimationUsingKeyFrames Duration="0"
                                                                                                   Storyboard.TargetName="PressedElement"
                                                                                                   Storyboard.TargetProperty="(UIElement.Visibility)">
                                                                        <DiscreteObjectKeyFrame KeyTime="0">
                                                                            <DiscreteObjectKeyFrame.Value>
                                                                                <Visibility>Visible</Visibility>
                                                                            </DiscreteObjectKeyFrame.Value>
                                                                        </DiscreteObjectKeyFrame>
                                                                    </ObjectAnimationUsingKeyFrames>
                                                                </Storyboard>
                                                            </VisualState>
                                                            <VisualState x:Name="Disabled">
                                                                <Storyboard>
                                                                    <DoubleAnimation Duration="0"
                                                                                     Storyboard.TargetName="BackgroundElement"
                                                                                     Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                                     To="0.5" />
                                                                    <DoubleAnimation Duration="0"
                                                                                     Storyboard.TargetName="contentPresenter"
                                                                                     Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                                     To="0.5" />
                                                                </Storyboard>
                                                            </VisualState>
                                                        </VisualStateGroup>
                                                        <VisualStateGroup x:Name="CheckStates">
                                                            <VisualState x:Name="Checked">
                                                                <Storyboard>
                                                                    <ObjectAnimationUsingKeyFrames Duration="0"
                                                                                                   Storyboard.TargetName="CheckedElement"
                                                                                                   Storyboard.TargetProperty="(UIElement.Visibility)">
                                                                        <DiscreteObjectKeyFrame KeyTime="0">
                                                                            <DiscreteObjectKeyFrame.Value>
                                                                                <Visibility>Visible</Visibility>
                                                                            </DiscreteObjectKeyFrame.Value>
                                                                        </DiscreteObjectKeyFrame>
                                                                    </ObjectAnimationUsingKeyFrames>
                                                                </Storyboard>
                                                            </VisualState>
                                                            <VisualState x:Name="Unchecked" />
                                                        </VisualStateGroup>
                                                        <VisualStateGroup x:Name="FocusStates">
                                                            <VisualState x:Name="Focused">
                                                                <Storyboard>
                                                                    <DoubleAnimation Duration="0"
                                                                                     Storyboard.TargetName="FocusVisualElement"
                                                                                     Storyboard.TargetProperty="Opacity"
                                                                                     To="1" />
                                                                </Storyboard>
                                                            </VisualState>
                                                            <VisualState x:Name="Unfocused" />
                                                        </VisualStateGroup>
                                                    </VisualStateManager.VisualStateGroups>
                                                    <c1:C1BrushBuilder x:Name="BackgroundBrush"
                                                                       DesignColor="#FFD1DCE8"
                                                                       ExtrapolationMethod="Absolute"
                                                                       Input="{Binding Background,
                                                                                       RelativeSource={RelativeSource TemplatedParent}}"
                                                                       IsHitTestVisible="False"
                                                                       Visibility="Collapsed">
                                                        <c1:C1BrushBuilder.DesignBrush>
                                                            <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                                <GradientStop Offset="0" Color="#FFF2F2F2" />
                                                                <GradientStop Offset="0.5" Color="#FFEBEBEB" />
                                                                <GradientStop Offset="0.5" Color="Gainsboro" />
                                                                <GradientStop Offset="1" Color="#FFD0D0D0" />
                                                            </LinearGradientBrush>
                                                        </c1:C1BrushBuilder.DesignBrush>
                                                    </c1:C1BrushBuilder>
                                                    <c1:C1BrushBuilder x:Name="MouseOverBrush"
                                                                       DesignColor="#FFBFE1EA"
                                                                       ExtrapolationMethod="Absolute"
                                                                       Input="{TemplateBinding c1:ClearStyleExtensions.MouseOverBrush}"
                                                                       IsHitTestVisible="False"
                                                                       Visibility="Collapsed">
                                                        <c1:C1BrushBuilder.DesignBrush>
                                                            <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                                <GradientStop Offset="0" Color="#FFE7F5FD" />
                                                                <GradientStop Offset="0.5" Color="#FFDCF0FC" />
                                                                <GradientStop Offset="0.5" Color="#FFBDE6FD" />
                                                                <GradientStop Offset="1" Color="#FFA9D9F5" />
                                                            </LinearGradientBrush>
                                                        </c1:C1BrushBuilder.DesignBrush>
                                                    </c1:C1BrushBuilder>
                                                    <c1:C1BrushBuilder x:Name="PressedBrush"
                                                                       DesignColor="#FF8ED1E2"
                                                                       ExtrapolationMethod="Absolute"
                                                                       Input="{TemplateBinding c1:ClearStyleExtensions.PressedBrush}"
                                                                       IsHitTestVisible="False"
                                                                       Visibility="Collapsed">
                                                        <c1:C1BrushBuilder.DesignBrush>
                                                            <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                                                <GradientStop Offset="0" Color="#FFA9D9F5" />
                                                                <GradientStop Offset="0.5" Color="#FFC1E4F5" />
                                                                <GradientStop Offset="0.5" Color="#FFA9DAF3" />
                                                                <GradientStop Offset="1" Color="#FF91CDEB" />
                                                            </LinearGradientBrush>
                                                        </c1:C1BrushBuilder.DesignBrush>
                                                    </c1:C1BrushBuilder>
                                                    <c1:C1BrushBuilder x:Name="CheckedBrush"
                                                                       DesignBrush="#FF8ED1E2"
                                                                       DesignColor="#FF8ED1E2"
                                                                       ExtrapolationMethod="Absolute"
                                                                       Input="{TemplateBinding c1:ClearStyleExtensions.PressedBrush}"
                                                                       IsHitTestVisible="False"
                                                                       Visibility="Collapsed" />
                                                    <c1:C1BrushBuilder x:Name="InnerBorderBrush"
                                                                       DesignBrush="#FFFAFBFC"
                                                                       DesignColor="#FFD1DCE8"
                                                                       ExtrapolationMethod="Absolute"
                                                                       Input="{Binding Background,
                                                                                       RelativeSource={RelativeSource TemplatedParent}}"
                                                                       IsHitTestVisible="False"
                                                                       Visibility="Collapsed" />
                                                    <c1:C1BrushBuilder x:Name="InnerBorderMouseOverBrush"
                                                                       DesignBrush="#FFFAFBFC"
                                                                       DesignColor="#FFBFE1EA"
                                                                       ExtrapolationMethod="Absolute"
                                                                       Input="{TemplateBinding c1:ClearStyleExtensions.MouseOverBrush}"
                                                                       IsHitTestVisible="False"
                                                                       Visibility="Collapsed" />
                                                    <c1:C1BrushBuilder x:Name="InnerBorderPressedBrush"
                                                                       DesignBrush="#FFFAFBFC"
                                                                       DesignColor="#FF8ED1E2"
                                                                       ExtrapolationMethod="Absolute"
                                                                       Input="{TemplateBinding c1:ClearStyleExtensions.PressedBrush}"
                                                                       IsHitTestVisible="False"
                                                                       Visibility="Collapsed" />
                                                    <Border x:Name="BackgroundElement"
                                                            Background="{Binding Output,
                                                                                 ElementName=BackgroundBrush}"
                                                            BorderBrush="{TemplateBinding BorderBrush}"
                                                            BorderThickness="{TemplateBinding BorderThickness}"
                                                            CornerRadius="{TemplateBinding c1:ClearStyleExtensions.CornerRadius}">
                                                        <Border BorderBrush="{Binding Output,
                                                                                      ElementName=InnerBorderBrush}"
                                                                BorderThickness="1"
                                                                CornerRadius="{TemplateBinding c1:ClearStyleExtensions.CornerRadius}" />
                                                    </Border>
                                                    <Border x:Name="CheckedElement"
                                                            Background="{Binding Output,
                                                                                 ElementName=CheckedBrush}"
                                                            BorderThickness="{TemplateBinding BorderThickness}"
                                                            CornerRadius="{TemplateBinding c1:ClearStyleExtensions.CornerRadius}"
                                                            Visibility="Collapsed" />
                                                    <Border x:Name="MouseOverElement"
                                                            Background="{Binding Output,
                                                                                 ElementName=MouseOverBrush}"
                                                            BorderThickness="{TemplateBinding BorderThickness}"
                                                            CornerRadius="{TemplateBinding c1:ClearStyleExtensions.CornerRadius}"
                                                            Visibility="Collapsed">
                                                        <Border BorderBrush="{Binding Output,
                                                                                      ElementName=InnerBorderMouseOverBrush}"
                                                                BorderThickness="1"
                                                                CornerRadius="{TemplateBinding c1:ClearStyleExtensions.CornerRadius}" />
                                                    </Border>
                                                    <Border x:Name="PressedElement"
                                                            Background="{Binding Output,
                                                                                 ElementName=PressedBrush}"
                                                            BorderThickness="{TemplateBinding BorderThickness}"
                                                            CornerRadius="{TemplateBinding c1:ClearStyleExtensions.CornerRadius}"
                                                            Visibility="Collapsed">
                                                        <Border BorderBrush="{Binding Output,
                                                                                      ElementName=InnerBorderPressedBrush}"
                                                                BorderThickness="1"
                                                                CornerRadius="{TemplateBinding c1:ClearStyleExtensions.CornerRadius}" />
                                                    </Border>
                                                    <ContentPresenter x:Name="contentPresenter"
                                                                      Margin="{TemplateBinding Padding}"
                                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                                      Content="{TemplateBinding Content}"
                                                                      ContentTemplate="{TemplateBinding ContentTemplate}" />
                                                    <Border x:Name="FocusVisualElement"
                                                            BorderBrush="{TemplateBinding c1:ClearStyleExtensions.FocusBrush}"
                                                            BorderThickness="{TemplateBinding BorderThickness}"
                                                            CornerRadius="{TemplateBinding c1:ClearStyleExtensions.CornerRadius}"
                                                            IsHitTestVisible="False"
                                                            Opacity="0" />
                                                </Grid>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </RepeatButton.Style>
                            <Polygon Width="5"
                                     Height="5"
                                     Margin="0,0,1,0"
                                     Fill="{TemplateBinding ButtonForeground}"
                                     Points="0,0 2,0 1,1"
                                     Stretch="Uniform" />
                        </RepeatButton>
                    </Border>
                </Grid>
            </Grid>
            <c1:C1ValidationDecorator x:Name="ValidationDecorator"
                                      CornerRadius="{TemplateBinding CornerRadius}"
                                      Style="{TemplateBinding ValidationDecoratorStyle}"
                                      Target="{Binding RelativeSource={RelativeSource TemplatedParent}}" />
        </Grid>
    </ControlTemplate>

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2"
                               SnapsToDevicePixels="true"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeDashArray="1 2"
                               StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD" />
    <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070" />
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD" />
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1" />
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6" />
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B" />
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4" />
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5" />
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383" />
    <Style x:Key="FilterButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="#FF2686D1" />
        <Setter Property="BorderBrush" Value="#00000000" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="3"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Focusable="False"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="#2072B2" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="border" Property="Background" Value="#0060AF" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource Button.Disabled.Background}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Button.Disabled.Border}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{StaticResource Button.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="WidgetTextBoxBaseControlTemplate" TargetType="{x:Type TextBoxBase}">
        <Border x:Name="border"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="3"
                SnapsToDevicePixels="True">
            <ScrollViewer x:Name="PART_ContentHost"
                          Focusable="False"
                          HorizontalScrollBarVisibility="Hidden"
                          VerticalScrollBarVisibility="Hidden" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="border" Property="Opacity" Value="0.56" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="border" Property="BorderBrush" Value="#FF7EB4EA" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter TargetName="border" Property="BorderBrush" Value="#FF569DE5" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="BorderBrush" Value="{DynamicResource BlackBrush}" />
        <Setter Property="Background" Value="{DynamicResource WhiteBrush}" />
        <Setter Property="BorderThickness" Value="0,1,0,0" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
        <Setter Property="AlternationCount" Value="2" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="3"
                            SnapsToDevicePixels="True">
                        <ScrollViewer Padding="{TemplateBinding Padding}" Style="{DynamicResource MetroGridViewScrollViewerStyle}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource GrayBrush9}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border Uid="Border_57"
                            x:Name="ListBoxItemRoot"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1,0"
                            CornerRadius="2">
                        <GridViewRowPresenter Uid="GridViewRowPresenter_1"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Columns="{TemplateBinding GridView.ColumnCollection}"
                                              Content="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.BasedOn>
            <Style TargetType="{x:Type ListBoxItem}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="FocusVisualStyle" Value="{DynamicResource ForegroundBrushFocusVisual}" />
                <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
                <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
                <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource ListItemForegroundBrush}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderThickness" Value="{DynamicResource ListBoxItemBorderThickness}" />
                <Setter Property="Padding" Value="4,2" />
                <Setter Property="MinHeight" Value="20" />
                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Border Uid="ListBoxItemRoot"
                                    x:Name="ListBoxItemRoot"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                <ContentPresenter Uid="ListBoxItemContent"
                                                  x:Name="ListBoxItemContent"
                                                  Margin="{TemplateBinding Padding}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Content="{TemplateBinding Content}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.BasedOn>
                    <Style TargetType="{x:Type ListBoxItem}">
                        <Setter Property="AutomationProperties.AutomationId" Value="{Binding FullName}" />
                        <Setter Property="AutomationProperties.Name" Value="{Binding DisplayName}" />
                    </Style>
                </Style.BasedOn>
                <Style.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="True" />
                            <Condition Property="IsSelected" Value="False" />
                        </MultiTrigger.Conditions>
                        <Setter Property="Foreground" Value="{DynamicResource ListItemMouseOverForegroundBrush}" />
                        <Setter Property="BorderBrush" Value="{DynamicResource ListItemMouseOverBorderBrush}" />
                    </MultiTrigger>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource ListItemSelectedForegroundBrush}" />
                        <Setter Property="BorderBrush" Value="{DynamicResource ListItemSelectedBorderBrush}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource ListItemDisabledForegroundBrush}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.BasedOn>
    </Style>

</ResourceDictionary>